История разработки кода

На начальных этапах проектирования и программирования нашего робота мы работали на базе платформы EV3. Мы пробовали писать код в двух средах, однако поначалу сталкивались с многочисленными трудностями: сначала мешали технические ограничения, затем — несовместимости между программами и оборудованием. Код неоднократно переписывался в зависимости от конфигурации робота и наличия или отсутствия Pixy-камеры. Мы экспериментировали: то разрабатывали алгоритмы без неё, то возвращали её в систему — и каждый раз адаптировали логику под изменяющиеся условия.

Основной принцип нашего кода — логические конструкции: множество операторов if, else, переключатели, условия на значение датчиков. Мы не прибегали к избыточной сложности, но при этом стремились к надёжности, гибкости и адаптивности.

Позже мы начали исследовать PID-регулирование с применением Pixy-камеры: пробовали реализовать движение по осям X и Y, приближение, отслеживание объекта и многое другое. Вместо точного фиксированного значения от датчика расстояния мы использовали интервал значений, что позволило повысить точность выравнивания. Однако со временем мы пришли к выводу, что камера работает нестабильно и мешает стабильной работе алгоритма. Это подтолкнуло нас к переходу на платформу VEX IQ.

На VEX мы использовали другую камеру, которая функционировала иначе: она не осуществляла постоянную съёмку, а требовала создания снимков — это породило новые сложности в реализации кода. Изначально мы писали простой код, проверяющий лишь наличие объекта, затем начали усложнять алгоритмы, включая работу с сигнатурами и динамическое принятие решений. Постепенно наш проект начал обретать устойчивую структуру.

Тем не менее, несмотря на многочисленные попытки и эксперименты, ближе к финалу мы осознали, что основная проблема заключалась вовсе не в коде, а в аппаратных ограничениях самой камеры. В сжатые сроки мы приняли решение полностью перейти на два датчика Opticull. Это потребовало кардинальной перестройки логики: мы реализовали полностью автономную систему, основанную на расчёте углов. Алгоритм оказался крайне чувствителен к любым сбоям — малейшая ошибка могла полностью вывести робота из строя. При этом из-за необходимости высокой точности движения его скорость была существенно ограничена.

Нам не удалось реализовать быстрый объезд, как у некоторых других команд, но мы сумели выдержать все жёсткие ограничения, наложенные правилами на конструкцию и программную часть. В результате родился сложный, насыщенный, но работающий код, который мы не собираемся оставлять в текущем виде. Мы видим его как фундамент, на котором будем строить более устойчивую, точную и быструю систему в будущем. И, несомненно, доведём её до совершенства.